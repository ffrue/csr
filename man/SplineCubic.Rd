% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CubicSplineRegression.R
\name{SplineCubic}
\alias{SplineCubic}
\title{Fit Upper Frontier Cubic Spline with Predefined Number of Knots}
\usage{
SplineCubic(xtab, ytab, xgrid, kn, cv, iters = 10000, eps = 1e-06)
}
\arguments{
\item{xtab}{numeric vector of x-indices of data points}

\item{ytab}{numeric vector of y-indices of data points}

\item{xgrid}{numeric vector of x-values where function should be evaluated}

\item{kn}{integer. number of knots for spline fitting}

\item{cv}{integer. indicates constraints for fitting: -1 (unconstrained), 0 (monotonically increasing), 1 (monotonically increasing + concave)}

\item{iters}{integer. iterations used for optimization for the CVXR solver}

\item{eps}{integer. stopping criterion (absolute some of deviations from constraints)}
}
\value{
numeric vector with y-values of fitted cubic spline at grid points
}
\description{
fits an (un)constrained cubic spline as upper frontier with predefined number of knots
}
\details{
The upper boundary curve fitted by this function is a cubic spline with selected number of knots \eqn{t_j} (location chosen at quantiles of $x$)
and the solution to the optimization problem \deqn{\min_\alpha \int \pi(x)^T \alpha dx = \sum_{j=0}^{N-1} \alpha_j \int \pi_j(x) dx}
subject to the envelopment constraint \eqn{\pi(x_i)^T \alpha \geq y_i \forall i=1,...,n}.
Intuitively, the boundary is chosen to minimize the area under the fitted curve while also being weakly above all data points.
If cv >= 0, it is also subject to the monotonicity constraint \eqn{\alpha_1 + 2 \alpha_2 t_{j-1} + 3\alpha_3 t_{j-1}^2 + \sum_{l=1}^{j-1} 3 \alpha_{l+3}(t_{j-1}-t_l)^2}.
If cv = 1, the concavity constraint \eqn{\pi''(t_j)^T \alpha \leq 0 \quad \forall j = 0,1,...,k_n} is also imposed.
The implementation of the cubic spline fitting follows the approach outlined in Daouia, Noh and Park 2016 and uses the
framework from the CVXR package.
}
\examples{
xtab=atp_2017$ranking_points
ytab=atp_2017$wins
xgrid=seq(min(xtab),max(xtab),length.out=101)
fit_m <- SplineCubic(xtab=xtab, ytab=ytab, xgrid=xgrid,
            kn=2, cv=0, iters=10000, eps=1e-6)
fit_mc <- SplineCubic(xtab=xtab, ytab=ytab, xgrid=xgrid,
            kn=2, cv=1, iters=100000, eps=1e-6)
plot(xtab,ytab, xlab="ranking points", ylab="wins", main="ATP results in 2017 per player")
lines(xgrid,fit_m,col="blue")
lines(xgrid,fit_mc,col="green")
legend("bottomright", col = c("green", "blue"),
      legend = c("monontone+concave", "monotone"), lwd = 2)
}
